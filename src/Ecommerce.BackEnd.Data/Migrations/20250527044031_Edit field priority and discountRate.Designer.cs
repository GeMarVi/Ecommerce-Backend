// <auto-generated />
using System;
using Ecommerce.BackEnd.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecommerce.BackEnd.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250527044031_Edit field priority and discountRate")]
    partial class EditfieldpriorityanddiscountRate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserProduct", b =>
                {
                    b.Property<int>("ProductsProduct_Id")
                        .HasColumnType("integer");

                    b.Property<string>("UsersId")
                        .HasColumnType("text");

                    b.HasKey("ProductsProduct_Id", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserProduct");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.DiscountCoupon", b =>
                {
                    b.Property<int>("DiscountCoupon_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiscountCoupon_Id"));

                    b.Property<string>("Coupon")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("DiscountPercentage")
                        .HasColumnType("smallint");

                    b.HasKey("DiscountCoupon_Id");

                    b.ToTable("DiscountCoupons");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.ImagesProduct", b =>
                {
                    b.Property<int>("Images_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Images_Id"));

                    b.Property<int>("Product_Id")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Images_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("ImagesProducts");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("DiscountCouponId")
                        .HasColumnType("integer");

                    b.Property<string>("GuestId")
                        .HasColumnType("text");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ShippmentInfo_Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPriceWithDiscount")
                        .HasColumnType("numeric");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("OrderId");

                    b.HasIndex("DiscountCouponId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ShippmentInfo_Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.OrderItem", b =>
                {
                    b.Property<long>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OrderItemId"));

                    b.Property<bool>("Coupon")
                        .HasColumnType("boolean");

                    b.Property<byte>("DiscountPercentaje")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<decimal>("PriceDiscount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceDiscountAndCoupon")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<double>("Size")
                        .HasColumnType("double precision");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("TotalPriceDiscount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPriceDiscountAndCoupon")
                        .HasColumnType("numeric");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatus_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderStatus_Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("OrderStatus_Id");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.PaymentDetails", b =>
                {
                    b.Property<int>("PaymentDetails_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentDetails_Id"));

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("NetReceivedAmount")
                        .HasColumnType("money");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text");

                    b.Property<decimal?>("TransactionAmount")
                        .HasColumnType("money");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("PaymentDetails_Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.Product", b =>
                {
                    b.Property<int>("Product_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Product_Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClosureType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("numeric");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OuterMaterial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ProductStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SoleMaterial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TypeDeport")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("hasDiscount")
                        .HasColumnType("boolean");

                    b.HasKey("Product_Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.ProductEvaluation", b =>
                {
                    b.Property<int>("ProductEvaluation_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductEvaluation_Id"));

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Evaluation")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EvaluationCreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Order_Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Product_Id")
                        .HasColumnType("integer");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductEvaluation_Id");

                    b.HasIndex("Order_Id");

                    b.HasIndex("Product_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("ProductEvaluations");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.ShipmentInfo", b =>
                {
                    b.Property<Guid>("ShipmentInfo_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AditionalInformation")
                        .HasColumnType("text");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("integer");

                    b.Property<string>("Colony")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GuestId")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User_Id")
                        .HasColumnType("text");

                    b.Property<bool>("isGuest")
                        .HasColumnType("boolean");

                    b.HasKey("ShipmentInfo_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("ShipmentInfo");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.SizeStock", b =>
                {
                    b.Property<int>("SizeStock_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SizeStock_Id"));

                    b.Property<int>("Product_Id")
                        .HasColumnType("integer");

                    b.Property<double>("Size")
                        .HasColumnType("double precision");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("SizeStock_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("SizeStocks");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.Tax", b =>
                {
                    b.Property<int>("Tax_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Tax_Id"));

                    b.Property<string>("AdditionalReferences")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Client_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<int?>("PostalCode")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("StreetAndNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Tax_Id");

                    b.HasIndex("Client_Id")
                        .IsUnique();

                    b.ToTable("Taxs");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.UserPaymentInformation", b =>
                {
                    b.Property<int>("UserPaymentInformation_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserPaymentInformation_Id"));

                    b.Property<int>("Cvv")
                        .HasMaxLength(3)
                        .HasColumnType("integer");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("NumberCard")
                        .HasColumnType("integer");

                    b.Property<string>("User_Id")
                        .HasColumnType("text");

                    b.HasKey("UserPaymentInformation_Id");

                    b.HasIndex("User_Id")
                        .IsUnique();

                    b.ToTable("ClientPaymentInformation");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.VerificationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("User_Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("VerificationCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserProduct", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProduct_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.BackEnd.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.ImagesProduct", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.Product", "Product")
                        .WithMany("ImagesProduct")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.Order", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.DiscountCoupon", "DiscountCoupon")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountCouponId");

                    b.HasOne("Ecommerce.BackEnd.Data.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.BackEnd.Data.Models.ShipmentInfo", "ShipmentInfo")
                        .WithMany("orders")
                        .HasForeignKey("ShippmentInfo_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.BackEnd.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DiscountCoupon");

                    b.Navigation("OrderStatus");

                    b.Navigation("ShipmentInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.OrderItem", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.BackEnd.Data.Models.Product", "product")
                        .WithMany("orderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.PaymentDetails", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.Order", "Order")
                        .WithOne("PaymentDetails")
                        .HasForeignKey("Ecommerce.BackEnd.Data.Models.PaymentDetails", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.ProductEvaluation", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("Order_Id");

                    b.HasOne("Ecommerce.BackEnd.Data.Models.Product", "product")
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.BackEnd.Data.Models.ApplicationUser", "user")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.ShipmentInfo", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.ApplicationUser", "user")
                        .WithMany("Shipments")
                        .HasForeignKey("User_Id");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.SizeStock", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.Product", "Product")
                        .WithMany("sizeStocks")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.Tax", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.ApplicationUser", "Client")
                        .WithOne("Tax")
                        .HasForeignKey("Ecommerce.BackEnd.Data.Models.Tax", "Client_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.UserPaymentInformation", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.ApplicationUser", "User")
                        .WithOne("UserPaymentInformation")
                        .HasForeignKey("Ecommerce.BackEnd.Data.Models.UserPaymentInformation", "User_Id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.VerificationCode", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.ApplicationUser", "user")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.BackEnd.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ecommerce.BackEnd.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Shipments");

                    b.Navigation("Tax");

                    b.Navigation("UserPaymentInformation");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.DiscountCoupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("PaymentDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.Product", b =>
                {
                    b.Navigation("ImagesProduct");

                    b.Navigation("orderItems");

                    b.Navigation("sizeStocks");
                });

            modelBuilder.Entity("Ecommerce.BackEnd.Data.Models.ShipmentInfo", b =>
                {
                    b.Navigation("orders");
                });
#pragma warning restore 612, 618
        }
    }
}
